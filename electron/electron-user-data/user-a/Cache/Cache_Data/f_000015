import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/components/Message.jsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=3e05e836"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=3e05e836"; const useEffect = __vite__cjsImport3_react["useEffect"]; const useState = __vite__cjsImport3_react["useState"]; const useMemo = __vite__cjsImport3_react["useMemo"]; const useCallback = __vite__cjsImport3_react["useCallback"];
import { useAuthStore } from "/src/store/useAuthStore.js";
import { useChatStore } from "/src/store/useChatStore.js";
import { arrayBufferToBase64, base64ToArrayBuffer, formatMessageTime } from "/src/lib/utils.js";
import JSEncrypt from "/node_modules/.vite/deps/jsencrypt.js?v=3e05e836";
import toast from "/node_modules/.vite/deps/react-hot-toast.js?v=3e05e836";
import { Loader, Download, FileText, FileWarning, Trash2 } from "/node_modules/.vite/deps/lucide-react.js?v=3e05e836";
import DecryptedMessageContent from "/src/components/DecryptedMessageContent.jsx";
const formatFileSize = (bytes) => {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + " " + sizes[i];
};
const Message = ({ message }) => {
  _s();
  const authUser = useAuthStore((state) => state.authUser);
  const privateKey = useAuthStore((state) => state.privateKey);
  const selectedUser = useChatStore((state) => state.selectedUser);
  const selectedMessageId = useChatStore((state) => state.selectedMessageId);
  const setSelectedMessageId = useChatStore((state) => state.setSelectedMessageId);
  const deleteMessage = useChatStore((state) => state.deleteMessage);
  const [isDownloading, setIsDownloading] = useState(false);
  const isSender = message.senderId === authUser?._id;
  const chatClassName = isSender ? "chat-end" : "chat-start";
  const bubbleBgColor = isSender ? "bg-sky-500" : "bg-gray-600";
  const profilePic = isSender ? authUser?.profilePic : selectedUser?.profilePic;
  const formattedTime = formatMessageTime(message.createdAt);
  const isSelected = selectedMessageId === message._id;
  console.log(`[Message ${message._id}] Render. isSender: ${isSender}, selectedMessageId: ${selectedMessageId}, isSelected: ${isSelected}`);
  const handleMessageClick = useCallback(() => {
    console.log(`[Message ${message._id}] handleMessageClick fired. isSender: ${isSender}`);
    if (isSender) {
      setSelectedMessageId(message._id);
    } else {
      setSelectedMessageId(null);
      console.log(`[Message ${message._id}] Clicked received message, clearing selection.`);
    }
  }, [message._id, isSender, setSelectedMessageId]);
  const handleDeleteClick = useCallback((e) => {
    e.stopPropagation();
    console.log(`[Message ${message._id}] handleDeleteClick fired.`);
    if (window.confirm("Are you sure you want to delete this message?")) {
      deleteMessage(message._id);
    }
  }, [message._id, deleteMessage]);
  const handleDownloadFile = useCallback(async () => {
    setSelectedMessageId(null);
    if (!message.is_file || !privateKey) {
      toast.error("Cannot download file: Information missing or no private key.");
      return;
    }
    setIsDownloading(true);
    const loadingToastId = toast.loading("Starting download...");
    let encryptedAesKeyBase64 = null;
    let decryptedAesKeyBase64 = null;
    let fileAesKey = null;
    try {
      console.log(`[handleDownloadFile] Checking keys for message ${message._id}:`);
      console.log(`  -> isSender: ${isSender} (authUser: ${authUser?._id}, msgSender: ${message.senderId})`);
      console.log(`  -> message.file_encrypted_key (for receiver):`, message.file_encrypted_key ? message.file_encrypted_key.substring(0, 30) + "..." : "MISSING/NULL");
      console.log(`  -> message.file_encrypted_key_sender (for sender):`, message.file_encrypted_key_sender ? message.file_encrypted_key_sender.substring(0, 30) + "..." : "MISSING/NULL");
      encryptedAesKeyBase64 = isSender ? message.file_encrypted_key_sender : message.file_encrypted_key;
      console.log(`[handleDownloadFile] Assigned encryptedAesKeyBase64 = ${encryptedAesKeyBase64 ? encryptedAesKeyBase64.substring(0, 30) + "..." : "FALSY"}`);
      if (!encryptedAesKeyBase64) {
        throw new Error("Missing encrypted AES key for the file.");
      }
      const decryptor = new JSEncrypt();
      decryptor.setPrivateKey(privateKey);
      decryptedAesKeyBase64 = decryptor.decrypt(encryptedAesKeyBase64);
      if (decryptedAesKeyBase64 === false || decryptedAesKeyBase64 === null) {
        console.error(`[handleDownloadFile] RSA Decryption FAILED! decrypt() returned: ${decryptedAesKeyBase64}`);
        throw new Error("RSA Decryption Failed. Cannot retrieve AES key.");
      }
      const aesKeyBuffer = base64ToArrayBuffer(decryptedAesKeyBase64);
      fileAesKey = await crypto.subtle.importKey(
        "raw",
        aesKeyBuffer,
        { name: "AES-GCM" },
        true,
        ["decrypt"]
      );
      console.log("[handleDownloadFile] Imported fileAesKey object:", fileAesKey);
      console.log("[handleDownloadFile] Decrypted AES Key (Base64 for import):", decryptedAesKeyBase64);
      if (!message.file_iv) {
        throw new Error("Missing file IV in message data.");
      }
      console.log("[handleDownloadFile] File IV (Base64 from message.file_iv):");
      console.log(message.file_iv);
      const fileIv = base64ToArrayBuffer(message.file_iv);
      console.log("[handleDownloadFile] File IV ArrayBuffer length:", fileIv.byteLength);
      toast.loading("Downloading encrypted file...", { id: loadingToastId });
      const response = await fetch(`/api/files/download/${message.file_path}`, {
        credentials: "include"
      });
      const contentType = response.headers.get("content-type");
      console.log("[handleDownloadFile] Response headers:", {
        status: response.status,
        statusText: response.statusText,
        contentType,
        contentLength: response.headers.get("content-length")
      });
      if (!response.ok) {
        const errorText = await response.text();
        console.error("[handleDownloadFile] Server error response:", {
          status: response.status,
          statusText: response.statusText,
          responseText: errorText.substring(0, 200) + "..."
        });
        throw new Error(`Server returned error: ${response.status} ${response.statusText}`);
      }
      if (!contentType) {
        console.warn("[handleDownloadFile] Missing content-type header");
      } else if (!contentType.includes("application/octet-stream")) {
        console.warn(`[handleDownloadFile] Unexpected content-type: ${contentType}, but proceeding anyway`);
      }
      const encryptedFileBuffer = await response.arrayBuffer();
      console.log("[handleDownloadFile] Encrypted file buffer size:", encryptedFileBuffer.byteLength);
      const downloadedBytes = new Uint8Array(encryptedFileBuffer);
      console.log(`[handleDownloadFile] Downloaded Buffer (${downloadedBytes.length} bytes) Start:`, downloadedBytes.slice(0, 16));
      console.log(`[handleDownloadFile] Downloaded Buffer End:`, downloadedBytes.slice(-16));
      const firstBytesStr = String.fromCharCode.apply(null, downloadedBytes.slice(0, 20));
      if (firstBytesStr.includes("<!DOCTYPE") || firstBytesStr.includes("<html")) {
        console.error("[handleDownloadFile] Received HTML instead of binary data:", firstBytesStr);
        throw new Error("Server returned HTML instead of file data. Please check server logs.");
      }
      toast.loading("Decrypting file...", { id: loadingToastId });
      console.log("[handleDownloadFile] Attempting crypto.subtle.decrypt...");
      const decryptedFileBuffer = await crypto.subtle.decrypt(
        { name: "AES-GCM", iv: fileIv },
        fileAesKey,
        encryptedFileBuffer
      );
      const blob = new Blob([decryptedFileBuffer], { type: message.file_type || "application/octet-stream" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = message.original_file_name || "downloaded_file";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      toast.success("File downloaded and decrypted!", { id: loadingToastId });
    } catch (error) {
      console.error("--- Error downloading/decrypting file ---");
      if (error instanceof Error) {
        console.error("Error Name:", error.name);
        console.error("Error Message:", error.message);
        console.error("Message ID:", message._id);
        console.error("Used Decrypted AES Key (Base64):", decryptedAesKeyBase64);
        console.error("Imported fileAesKey object (at time of error):", fileAesKey);
        console.error("Used IV (Base64 from msg.file_iv):", message.file_iv);
        console.error("Error Stack:", error.stack);
        toast.error(`Download failed: ${error.name} - ${error.message}`, { id: loadingToastId });
      } else {
        console.error("Caught non-Error object:", error);
        toast.error(`Download failed due to an unexpected error. Check console.`, { id: loadingToastId });
      }
      console.error("--- End Error Details ---");
    } finally {
      setIsDownloading(false);
      setSelectedMessageId(null);
    }
  }, [message, privateKey, isSender, setSelectedMessageId]);
  return /* @__PURE__ */ jsxDEV(
    "div",
    {
      className: `chat ${chatClassName} relative group ${isSender ? "cursor-pointer" : ""}`,
      onClick: handleMessageClick,
      children: [
        isSender && isSelected && /* @__PURE__ */ jsxDEV(
          "button",
          {
            onClick: handleDeleteClick,
            className: `absolute ${isSender ? "right-[calc(2.5rem+0.5rem)]" : "left-[calc(2.5rem+0.5rem)]"} top-1/2 transform -translate-y-1/2
                               p-1.5 rounded-full bg-red-500 hover:bg-red-600 text-white
                               opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10`,
            title: "Delete Message",
            children: /* @__PURE__ */ jsxDEV(Trash2, { size: 18 }, void 0, false, {
              fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
              lineNumber: 228,
              columnNumber: 21
            }, this)
          },
          void 0,
          false,
          {
            fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
            lineNumber: 220,
            columnNumber: 7
          },
          this
        ),
        /* @__PURE__ */ jsxDEV("div", { className: "chat-image avatar", children: /* @__PURE__ */ jsxDEV("div", { className: "w-10 rounded-full", children: /* @__PURE__ */ jsxDEV("img", { alt: "User avatar", src: profilePic || "/avatar.png" }, void 0, false, {
          fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
          lineNumber: 234,
          columnNumber: 21
        }, this) }, void 0, false, {
          fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
          lineNumber: 233,
          columnNumber: 17
        }, this) }, void 0, false, {
          fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
          lineNumber: 232,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ jsxDEV("div", { className: `chat-bubble ${bubbleBgColor} text-white pb-2 px-3 break-words`, children: message.is_file === true ? /* @__PURE__ */ jsxDEV("div", { className: "flex items-center gap-3 p-2", children: [
          /* @__PURE__ */ jsxDEV("button", { onClick: !isDownloading ? handleDownloadFile : void 0, disabled: isDownloading, className: "flex-shrink-0 p-1 rounded hover:bg-black/20", children: isDownloading ? /* @__PURE__ */ jsxDEV(Loader, { className: "size-6 animate-spin" }, void 0, false, {
            fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
            lineNumber: 243,
            columnNumber: 13
          }, this) : /* @__PURE__ */ jsxDEV(Download, { className: "size-6 text-sky-300" }, void 0, false, {
            fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
            lineNumber: 245,
            columnNumber: 13
          }, this) }, void 0, false, {
            fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
            lineNumber: 241,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ jsxDEV("div", { className: "flex flex-col overflow-hidden", children: [
            /* @__PURE__ */ jsxDEV("span", { className: "text-sm font-medium truncate", title: message.original_file_name, children: message.original_file_name || "Attached File" }, void 0, false, {
              fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
              lineNumber: 249,
              columnNumber: 29
            }, this),
            /* @__PURE__ */ jsxDEV("span", { className: "text-xs opacity-70", children: formatFileSize(message.file_size || 0) }, void 0, false, {
              fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
              lineNumber: 252,
              columnNumber: 29
            }, this)
          ] }, void 0, true, {
            fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
            lineNumber: 248,
            columnNumber: 25
          }, this)
        ] }, void 0, true, {
          fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
          lineNumber: 240,
          columnNumber: 9
        }, this) : /* @__PURE__ */ jsxDEV(
          DecryptedMessageContent,
          {
            message,
            privateKey,
            isSender
          },
          void 0,
          false,
          {
            fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
            lineNumber: 259,
            columnNumber: 9
          },
          this
        ) }, void 0, false, {
          fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
          lineNumber: 237,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ jsxDEV("div", { className: "chat-footer opacity-50 text-xs flex gap-1 items-center mt-1", children: formattedTime }, void 0, false, {
          fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
          lineNumber: 266,
          columnNumber: 13
        }, this)
      ]
    },
    void 0,
    true,
    {
      fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx",
      lineNumber: 214,
      columnNumber: 5
    },
    this
  );
};
_s(Message, "tHXX9gvKS3N9jkyPiW5JV8WYg9c=", false, function() {
  return [useAuthStore, useAuthStore, useChatStore, useChatStore, useChatStore, useChatStore];
});
_c = Message;
export default Message;
var _c;
$RefreshReg$(_c, "Message");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/Message.jsx", currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,