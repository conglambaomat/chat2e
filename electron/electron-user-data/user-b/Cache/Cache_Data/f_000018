import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/components/DecryptedMessageContent.jsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=3e05e836"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=3e05e836"; const useEffect = __vite__cjsImport3_react["useEffect"]; const useState = __vite__cjsImport3_react["useState"]; const useMemo = __vite__cjsImport3_react["useMemo"];
import { JSEncrypt } from "/node_modules/.vite/deps/jsencrypt.js?v=3e05e836";
import { Loader, FileWarning } from "/node_modules/.vite/deps/lucide-react.js?v=3e05e836";
import { arrayBufferToBase64, base64ToArrayBuffer } from "/src/lib/utils.js";
const decryptMessageInternal = async (message, privateKeyPem, isSender) => {
  if (!privateKeyPem) {
    console.error("[DecryptedContent] Decryption failed: Private key is missing.");
    return { data: null, error: "Missing private key.", isLoading: false };
  }
  try {
    const keyToUse = isSender ? message.encryptedKeySender : message.encryptedKey;
    if (!keyToUse) {
      throw new Error(`Missing ${isSender ? "sender" : "recipient"} encrypted key`);
    }
    const decryptor = new JSEncrypt();
    decryptor.setPrivateKey(privateKeyPem);
    const decryptedAesKeyBase64 = decryptor.decrypt(keyToUse);
    if (!decryptedAesKeyBase64) {
      throw new Error(`Failed to decrypt AES key using ${isSender ? "sender" : "recipient"} key`);
    }
    const aesKeyBuffer = base64ToArrayBuffer(decryptedAesKeyBase64);
    const aesKey = await crypto.subtle.importKey("raw", aesKeyBuffer, { name: "AES-GCM", length: 256 }, true, ["decrypt"]);
    if (typeof message.iv !== "string" || message.iv.length < 5) {
      console.error(`[DecryptedContent ${message._id}] Invalid IV received. Type: ${typeof message.iv}, Value:`, message.iv);
      throw new Error("Invalid IV format received.");
    }
    const ivBuffer = base64ToArrayBuffer(message.iv);
    if (typeof message.encryptedContent !== "string" || message.encryptedContent.length < 5) {
      console.error(`[DecryptedContent ${message._id}] Invalid encryptedContent received. Type: ${typeof message.encryptedContent}, Value:`, message.encryptedContent);
      throw new Error("Invalid encrypted content format received.");
    }
    const encryptedContentBuffer = base64ToArrayBuffer(message.encryptedContent);
    const decryptedContentBuffer = await crypto.subtle.decrypt({ name: "AES-GCM", iv: ivBuffer }, aesKey, encryptedContentBuffer);
    const decoder = new TextDecoder();
    const decryptedText = decoder.decode(decryptedContentBuffer);
    return { data: decryptedText, error: null, isLoading: false };
  } catch (error) {
    console.error(`[DecryptedContent ${message._id}] Decryption failed:`, error);
    const errorMessage = error instanceof DOMException && error.message.includes("ciphertext") ? "Decryption failed (likely incorrect key or corrupted data)." : `Decryption failed: ${error.message}`;
    return { data: "[Decryption Error]", error: errorMessage, isLoading: false };
  }
};
const DecryptedMessageContent = ({ message, privateKey, isSender }) => {
  _s();
  const [decryptionState, setDecryptionState] = useState({
    data: null,
    isLoading: true,
    error: null
  });
  useEffect(() => {
    let isMounted = true;
    setDecryptionState({ data: null, isLoading: true, error: null });
    decryptMessageInternal(message, privateKey, isSender).then((result) => {
      if (isMounted) {
        setDecryptionState(result);
      }
    }).catch((error) => {
      console.error("[DecryptedContent] Error during decryption process:", error);
      if (isMounted) {
        setDecryptionState({ data: "[Error]", isLoading: false, error: "Decryption process failed." });
      }
    });
    return () => {
      isMounted = false;
    };
  }, [message, privateKey, isSender]);
  const isImage = useMemo(() => {
    return typeof decryptionState.data === "string" && decryptionState.data.startsWith("data:image");
  }, [decryptionState.data]);
  if (decryptionState.isLoading) {
    return /* @__PURE__ */ jsxDEV(Loader, { className: "size-4 animate-spin my-1" }, void 0, false, {
      fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx",
      lineNumber: 94,
      columnNumber: 12
    }, this);
  }
  if (decryptionState.error) {
    return /* @__PURE__ */ jsxDEV("div", { className: "flex items-center gap-2 text-red-300", children: [
      /* @__PURE__ */ jsxDEV(FileWarning, { className: "size-4 flex-shrink-0" }, void 0, false, {
        fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx",
        lineNumber: 100,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ jsxDEV("span", { className: "text-xs italic", title: decryptionState.error, children: [
        decryptionState.data,
        " (",
        decryptionState.error,
        ")"
      ] }, void 0, true, {
        fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx",
        lineNumber: 101,
        columnNumber: 17
      }, this)
    ] }, void 0, true, {
      fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx",
      lineNumber: 99,
      columnNumber: 7
    }, this);
  }
  if (isImage) {
    return /* @__PURE__ */ jsxDEV("img", { src: decryptionState.data, alt: "Sent image", className: "max-w-xs rounded-md mt-2" }, void 0, false, {
      fileName: "E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx",
      lineNumber: 109,
      columnNumber: 12
    }, this);
  }
  return decryptionState.data;
};
_s(DecryptedMessageContent, "3iCNIxWdepUfbRJO0W9NnHqJLjA=");
_c = DecryptedMessageContent;
export default DecryptedMessageContent;
var _c;
$RefreshReg$(_c, "DecryptedMessageContent");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("E:/Do_an_Lap_Trinh_mang/NT106.Nhom7/frontend/src/components/DecryptedMessageContent.jsx", currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,